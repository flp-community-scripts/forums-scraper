"""flp
Title: Random Chopper
Author: Pierre Sosa
Category: Generate (rhythm)
Version: v2.1
License: Unknown

Description: 
This script allows you to chop random notes into rolls of random chop lengths.
It has been updated with bug fixes and the addition of Random Chopper v2, which
slices notes into chops of random lengths. There are two versions of the script:
"Lite" and "Full," each with different controls for controlling the chop
lengths. The latest version, Random Chopper v2.1, includes a "seed for RNG" knob
to control the randomness of the chops.

Changelog:
2023-08-26 (v2.1)
- Added Random Chopper v2.1 with the 'seed for RNG' knob. If it's set to 0 then
the seed is changed in each execution of the script. If it's set to a positive
value then the seed is kept. The max value of the knob is 999 but you can modify
it to a larger value by changing the value in the 4th line of the script file if
needed.

2023-08-05 (v2)
- Added Random Chopper v2 which chops the note(s) in two stages. First 'chopper'
slices the note(s) into chops of random lengths. Second 'chopper' slices random
notes (made by the first chopper or taken directly from the piano roll if the
first 'chopper' is turned off). There are 2 versions of the script:
  - "Lite" version which controls the range of possible 2nd chopper chop lengths
only with a min-max range set by knobs/drop down menus and checkboxes for
allowing even and triplets units.
  - "Full" version which gives detailed control over each possible chop length
with checkboxes.
  - Each version comes with 2 editions: one with knobs, and second with drop
down menus for controlling the min-max range of the second 'chopper'. The
editions work in the same way, it's just different controls type.

2023-10-07
- Bug-fix

Thread Link: https://forum.image-line.com/viewtopic.php?t=307714
"""
import flpianoroll as flp
import _random

beat = flp.score.PPQ  # PPQ equals how many ticks there are in a beat
bar = beat * 4
step = beat / 4

notes_properties = ['velocity', 'pan', 'fcut', 'fres', 'pitchofs', 'length', 'time', 'number', 'color', 'group',
                    'slide', 'porta', 'muted', 'selected']

units_str = ["Tick", "1/8 Step", "1/6 Step", "1/4 Step", "1/3 Step", "1/2 Step", "1/6 Beat", "Step", "1/3 Beat", "1/2 Beat", "1/6 Bar", "Beat"]
default_v_for_allow = [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1]
units = [1, 1 / 8 * step, 1 / 6 * step, 1 / 4 * step, 1 / 3 * step, 1 / 2 * step, 1 / 6 * beat, step, 1 / 3 * beat, 1 / 2 * beat, 1 / 6 * bar, beat]

for n in range(flp.score.noteCount):
    flp.score.getNote(n).selected = False


def random_value(return_int, range_min, range_max):
	x = _random.Random()
	x.seed()
	random_value = x.random()
	random_value = random_value * (range_max - range_min) + range_min  # convert value to fit between min and max range

	if return_int == True:  # convert value to integer
		return round(random_value)
	return random_value


def createDialog():
    Form = flp.ScriptDialog("Random chopper",
                            "Minimum and maximum chop length values are automatically limited to the length of a chopped note if the value is set higher.\r\n" +
                            "Leave remainder: determines what to do with a last chop if it's not full length. E.g. beat note chopped to 1/6 bar (2/3 beat) chops will leave 1/3 beat reaminder. \r\n" +
                            "1/8 Step will be rounded with 24, 48, 72, 120, 144, 168 PPQ settings as the step is not divisible by 8 in those PPQ.\r\n" +
                            "1/4 Step will be rounded with 24, 72, 120, 168 PPQ settings as the step is not divisible by 4 in those PPQ.\r\n" +
                            "*** Script by Pierre Sosa ***")
    Form.AddInputKnob('Probability', 50, 0, 100)
    Form.AddInputCombo("Fade in velocity", "No,Yes", 0)
    Form.AddInputCombo("Min chop unit", [unit for unit in units_str], 1)
    Form.AddInputCombo("Max chop unit", [unit for unit in units_str], 13)
    for i in range(len(units)):
        Form.AddInputCombo(units_str[i] + " chops", "Don't Allow,Allow", default_v_for_allow[i])
    Form.AddInputCombo("Leave remainder", "No,Yes", 0)
    return Form


def apply(Form):
    	
	# Checks if there are notes in the score
	if flp.score.noteCount == 0: 
		flp.Utils.ShowMessage("There are no notes to chop!")
		return
	
	min_chop_length = units[Form.GetInputValue('Min chop unit')]
	max_chop_length = units[Form.GetInputValue('Max chop unit')]

	if min_chop_length > max_chop_length:
		flp.Utils.ShowMessage("Minimum chop length can't be higher than maximum chop length!")
		return

	allowed_units = []
	for i in range(Form.GetInputValue('Min chop unit'), Form.GetInputValue('Max chop unit') + 1):
		if Form.GetInputValue(units_str[i] + " chops") == 1:
			if units[i] == 0:
				allowed_units.append(1)
			else: allowed_units.append(int(units[i]))

	if len(allowed_units) == 0:
		flp.Utils.ShowMessage("No unit in min-max range is allowed!")
		return

	notes_to_alter = []  # List of indexes of notes to change
	for i in range(int(flp.score.noteCount * Form.GetInputValue("Probability") / 100)):
		random_int = random_value(True, 0, flp.score.noteCount - 1)  # Generate random note index
		while notes_to_alter.count(random_int) != 0:  # If the random index is already on the list...
			random_int = random_value(True, 0, flp.score.noteCount - 1)
		notes_to_alter.append(random_int)  # Add generated note index to the list

	def copy_note(note, i):
		new_note = flp.Note()
		for property in notes_properties:
			setattr(new_note, property, getattr(flp.score.getNote(note), property))
		if Form.GetInputValue("Fade in velocity") == 1:
			vel = getattr(flp.score.getNote(note), "velocity") / (number_of_chops + 1)
			setattr(new_note, "velocity", vel * (i + 1))
		if i == number_of_chops - 1 and last_chop != 0:
			setattr(new_note, "length", last_chop)
		new_note.time = flp.score.getNote(note).time + chop_length * i
		flp.score.addNote(new_note)

	for note in notes_to_alter:
		flp.score.getNote(note).selected = True
		max_length = min(flp.score.getNote(note).length, allowed_units[len(allowed_units) - 1])
		min_length = min(flp.score.getNote(note).length, allowed_units[0])

		chop_length = min(flp.score.getNote(note).length, allowed_units[random_value(True, 0, len(allowed_units) - 1)])
		if chop_length == 0:
			chop_length = 1
		number_of_chops = int(flp.score.getNote(note).length / chop_length)

		if flp.score.getNote(note).length % chop_length != 0 and Form.GetInputValue("Leave Remainder") == 1:
			number_of_chops += 1
		last_chop = (flp.score.getNote(note).length % chop_length) * Form.GetInputValue("Leave Remainder")

		flp.score.getNote(note).length = chop_length
		for i in range(1, number_of_chops):
			copy_note(note, i)
		if Form.GetInputValue("Fade in velocity") == 1:
			setattr(flp.score.getNote(note), "velocity", getattr(flp.score.getNote(note), "velocity") / (number_of_chops + 1))
