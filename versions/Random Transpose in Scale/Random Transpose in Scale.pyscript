"""flp
Title: Random Transpose in Scale
Author: Pierre Sosa
Category: Adjust
Version: v1.1
License: Unknown

Description: 
This script allows you to randomly transpose notes within a given scale and
range. It includes features such as a seed for the random number generator,
additional built-in scales, and bug fixes.

Changelog:
2023-08-09 (Random transpose in scale v1.1)
- added "Seed for RNG" knob
- added more built-in scales
- some bug-fixes

Thread Link: https://forum.image-line.com/viewtopic.php?t=308224
"""
import flpianoroll as flp
import _random

org_notes_numbers = []
for n in range(flp.score.noteCount):
	org_notes_numbers.append(flp.score.getNote(n).number)

leave = 0
first_run = True
randomized_notes_numbers = []

scales_intervals = [
    [0, 2, 4, 5, 7, 9, 11], # Major Intervals
    [0, 2, 3, 5, 7, 8, 10], # Minor Intervals  
    [0, 2, 3, 5, 7, 8, 11], # Minor Harmonic Intervals  
    [0, 2, 3, 5, 7, 9, 11]  # Minor Melodic Intervals  
]

def add_mode(shift):
	scale = []
	for i in scales_intervals[0]:
		i = i - shift
		if i < 0:
			i += 12
		scale.append(i)
	scale.sort()
	scales_intervals.append(scale)

modes_shift = (2,4,5,7,11) # Dorian, Phrygian, Lydian, Mixolydian, Locrian shift from Major Intervals

for mode in modes_shift:
	add_mode(mode)

is_there_scale_marker = False

if flp.score.markerCount > 0:

	scale_roots = []
	scale_helpers = []
	markers_times = []
	for m in range(flp.score.markerCount):
		marker = flp.score.getMarker(m)
		if marker.mode == 12:
			is_there_scale_marker = True
			marker_root = flp.score.getMarker(m).scale_root
			marker_helper = flp.score.getMarker(m).scale_helper
			scale_roots.append(marker_root)
			scale_helpers.append(marker_helper)
			markers_times.append(marker.time)

	if is_there_scale_marker == True:
		notes_indexes = [[] for i in range(len(markers_times))]
		notes_before_first_scale_marker_indexes = []

		for n in range(flp.score.noteCount):
			if flp.score.getNote(n).time < markers_times[0]:
				notes_before_first_scale_marker_indexes.append(n)
				continue
			for t in markers_times:
				if flp.score.getNote(n).time >= t:
					x = markers_times.index(t)
			notes_indexes[x].append(n)	

def random_value(return_int, range_min, range_max):
	x = _random.Random()
	x.seed()
	random_value = x.random()
	random_value = random_value * (range_max - range_min) + range_min # convert value to fit between min and max range
	if return_int == True: # convert value to integer
		return round(random_value)
	return random_value

def coin_flip():
	x = _random.Random()
	x.seed()
	random_value = x.random()
	if random_value >= 0.5: 
		return True
	return False 

def createDialog():
	Form = flp.ScriptDialog("Random transpose in scale","Randomly transposes notes by a given range in the scale.\r\n" +  
	"Probability knob: defines how many notes are going to be transposed. \r\n" +  
	"Before using the script make sure that all notes are inside the scale that has been selected. \r\n" + 
	"Markers scale mode works with scale markers.\r\n" +  
	"Designed for scales with seven degrees. For scales with a lower number of degrees transpose ranges are shrinked accordingly to a number of scale degrees. E.g. in pentatonic scale sixth transpose range will result in octave transpose. \r\n" + 
	"*** Script by Pierre Sosa ***")
	Form.AddInputCombo("Root Note", "C,C#,D,D#,E,F,F#,G,G#,A,A#,B", 6)
	Form.AddInputCombo("Scale", "Major,Minor,Minor Harmonic,Minor Melodic,Dorian,Phrygian,Lydian,Mixolydian,Locrian", 1)	
	Form.AddInputCombo("Scale mode", "Script,Markers", is_there_scale_marker)	
	Form.AddInputKnob("Probability", 50, 0, 100)
	Form.AddInputCombo("T. max range","Second,Third,Fourth,Fifth,Sixth,Seventh,Octave",6)
	Form.AddInputCombo("T. min range","None,Second,Third,Fourth,Fifth,Sixth,Seventh,Octave",0)
	Form.AddInputCombo("T. direction","Up,Down,Both",2)
	Form.AddInputCombo("Leave","None,First,Root",0)

	return Form

def apply(Form):
	
	# Checks if there are notes in the score
	if flp.score.noteCount == 0: 
		flp.Utils.ShowMessage("There are no notes!")
		return
	
	# For scale markers
	def convert_helper_format(m):
		temp_helper = [m[i] for i in range(len(m)) if m[i] != ","]
		intervals = [j for j in range(len(temp_helper)) if temp_helper[j] == '0']
		return intervals

	# Scale markers mode
	if Form.GetInputValue("Scale mode") == 1:			
		if is_there_scale_marker == False:
			flp.Utils.ShowMessage("There are no scale markers!")
			return		
		
		scales = []
		for m in scale_helpers:
			intervals = convert_helper_format(m)
			r = len(intervals)
			for octave in range(1,11):
				intervals.extend([intervals[i]+12*octave for i in range(r)])
			scales.append(intervals)

		for n in range(flp.score.noteCount):
			if notes_before_first_scale_marker_indexes.count(n) != 0:
				continue
			for t in markers_times:
				if flp.score.getNote(n).time >= t:
					x = markers_times.index(t)

			if scales[x].count(flp.score.getNote(n).number) == 0:
				flp.Utils.ShowMessage("At least one of the notes is outside the scale!")
				return	
				
	# Scale defined in script mode
	else: 
		# Convert scale intervals to include shift from root note
		root = Form.GetInputValue("Root Note")
		scale_intervals_temp = scales_intervals[Form.GetInputValue("Scale")].copy()
		
		for i in range(len(scale_intervals_temp)):
			scale_intervals_temp[i] = scale_intervals_temp[i] + root
			if scale_intervals_temp[i] > 11:
				scale_intervals_temp[i] = scale_intervals_temp[i] - 12
		scale_intervals_temp.sort()

		# Extends intervals to 11 octaves
		intervals = scale_intervals_temp
		r = len(intervals)
		for octave in range(1,11):
			intervals.extend([intervals[i]+12*octave for i in range(r)])
			
		# Checks if all notes are in the scale
		for n in range(flp.score.noteCount):
			if intervals.count(flp.score.getNote(n).number) == 0:
				flp.Utils.ShowMessage("At least one of the notes is outside the scale!")
				return				

	# To not change the seed while tweaking leave control
	global first_run	
	global leave

	if first_run == True:
		leave = Form.GetInputValue("Leave")
		first_run = False
	
	global first_note_rand_num
	global randomized_notes_numbers
	
	if leave != Form.GetInputValue("Leave"):
		leave = Form.GetInputValue("Leave")
		for n in range(flp.score.noteCount):
			flp.score.getNote(n).number = randomized_notes_numbers[n]
			if leave != 0:
				for t in markers_times:
					if flp.score.getNote(n).time >= t:
						x = markers_times.index(t)
				if leave == 1 and n == notes_indexes[x][0]:
					flp.score.getNote(n).number = org_notes_numbers[n]
				if leave == 2 and (org_notes_numbers[n] - scale_roots[x]) % 12 == 0:
					flp.score.getNote(n).number = org_notes_numbers[n]				
		return
	


	# Finds random notes to alter
	notes_to_alter = []  # List of indexes of notes to change
	for i in range(int(flp.score.noteCount * Form.GetInputValue("Probability") / 100)):
		random_int = random_value(True, 0, flp.score.noteCount - 1)  # Generate random note index
		while notes_to_alter.count(random_int) != 0:  # If the random index is already on the list...
			random_int = random_value(True, 0, flp.score.noteCount - 1)
		notes_to_alter.append(random_int)  # Add generated note index to the list

	if Form.GetInputValue("T. max range") + 1 < Form.GetInputValue("T. min range"):
		flp.Utils.ShowMessage("Transpose minimum range can't be lower than transpose maximum range!")
		return			
	
	transpose_max_range = Form.GetInputValue("T. max range") + 1
	transpose_min_range = Form.GetInputValue("T. min range")
	transpose_mode = Form.GetInputValue("T. direction")
	leave = Form.GetInputValue("Leave")

	for n in notes_to_alter:
		if transpose_mode == 0:
			transpose = random_value(True, transpose_min_range, transpose_max_range)
		elif transpose_mode == 1:
			transpose = random_value(True, - transpose_max_range, - transpose_min_range)
		else: 
			if coin_flip() == True:
				transpose = random_value(True, transpose_min_range, transpose_max_range)
			else: transpose = random_value(True, - transpose_max_range, - transpose_min_range)
			
		if Form.GetInputValue("Scale mode") == 1:	
			if notes_before_first_scale_marker_indexes.count(n) != 0:
				continue

			for t in markers_times:
				if flp.score.getNote(n).time >= t:
					x = markers_times.index(t)
			if leave == 1 and n == notes_indexes[x][0]:
				continue
			if leave == 2 and (flp.score.getNote(n).number - scale_roots[x]) % 12 == 0:
				continue
			i = scales[x].index(flp.score.getNote(n).number)
			flp.score.getNote(n).number = scales[x][i + transpose]
		else:
			if leave == 1 and n == 0:
				continue		
			if leave == 2 and (flp.score.getNote(n).number - root) % 12 == 0:
				continue		
			i = intervals.index(flp.score.getNote(n).number)
			flp.score.getNote(n).number = intervals[i + transpose]

	randomized_notes_numbers = []
	for n in range(flp.score.noteCount):
		randomized_notes_numbers.append(flp.score.getNote(n).number)
	