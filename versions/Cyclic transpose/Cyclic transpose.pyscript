"""flp
Title: Cyclic transpose
Author: Pierre Sosa
Category: Adjust
Version: Unknown
License: Unknown

Description: 
This script allows you to transpose notes within a specified range, limited by
the highest and lowest note. It is based on an idea by FaBianB.

Thread Link: https://forum.image-line.com/viewtopic.php?t=307757
"""
import flpianoroll as flp

max_note_number = 0
min_note_number = 0

if flp.score.noteCount > 0:

	original_notes_numbers = []
	original_notes_numbers_without_repetition = []

	for n in range(flp.score.noteCount):
		original_notes_numbers.append(flp.score.getNote(n).number)
		if original_notes_numbers_without_repetition.count(flp.score.getNote(n).number) == 0:
			original_notes_numbers_without_repetition.append(flp.score.getNote(n).number)	
	original_notes_numbers_without_repetition.sort()	
	max_note_number = max(original_notes_numbers)
	min_note_number = min(original_notes_numbers)

is_there_scale_marker = False

if flp.score.markerCount > 0:

	scale_roots = []
	scale_helpers = []
	markers_times = []
	for m in range(flp.score.markerCount):
		marker = flp.score.getMarker(m)
		if marker.mode == 12:
			is_there_scale_marker = True
			marker_root = flp.score.getMarker(m).scale_root
			marker_helper = flp.score.getMarker(m).scale_helper
			scale_roots.append(marker_root)
			scale_helpers.append(marker_helper)
			markers_times.append(marker.time)

	if is_there_scale_marker == True:
		notes_sections = [[] for i in range(len(markers_times))]
		notes_sections_times = [[] for i in range(len(markers_times))]
		notes_indexes = [[] for i in range(len(markers_times))]
		notes_before_first_scale_marker_indexes = []

		for n in range(flp.score.noteCount):
			if flp.score.getNote(n).time < markers_times[0]:
				notes_before_first_scale_marker_indexes.append(n)
				continue
			for t in markers_times:
				if flp.score.getNote(n).time >= t:
					x = markers_times.index(t)

			notes_sections[x].append(flp.score.getNote(n).number)	
			notes_sections_times[x].append(flp.score.getNote(n).time)	
			notes_indexes[x].append(n)	



def createDialog():
    Form = flp.ScriptDialog("Cyclic transpose","Transposes notes in a range limited by the highest and the lowest note.\r\n" + 
	"Scale mode works with scale markers. Make sure that all notes are inside the scale before using scale mode. \r\n" + 
	"Horizontal cycle will happen in scale markers notes sections in the scale mode.\r\n" + 
    "*** Script by Pierre Sosa ***")
    Form.AddInputKnobInt("Transpose", 0, -(max_note_number-min_note_number+1), max_note_number-min_note_number+1) 
    Form.AddInputCombo("Mode","Chromatic,Existing notes numbers,Scale",1)
    Form.AddInputKnobInt("Horizontal cycle", 0, -flp.score.noteCount, flp.score.noteCount)
    return Form

def apply(Form):

	if flp.score.noteCount == 0:
		flp.Utils.ShowMessage("There are no notes!")
		return
			
	def convert_helper_format(m):
		temp_helper = [m[i] for i in range(len(m)) if m[i] != ","]
		intervals = [j for j in range(len(temp_helper)) if temp_helper[j] == '0']
		return intervals

	if Form.GetInputValue("Mode") == 2:			
		if is_there_scale_marker == False:
			flp.Utils.ShowMessage("There are no scale markers!")
			return		

		scales = []
		for m in scale_helpers:
			intervals = convert_helper_format(m)
			r = len(intervals)
			for octave in range(1,11):
				intervals.extend([intervals[i]+12*octave for i in range(r)])
			scales.append(intervals)
	
		for n in range(flp.score.noteCount):
			if notes_before_first_scale_marker_indexes.count(n) != 0:
				continue
			for t in markers_times:
				if flp.score.getNote(n).time >= t:
					x = markers_times.index(t)
			if scales[x].count(flp.score.getNote(n).number) == 0:
				flp.Utils.ShowMessage("At least one of the notes is outside the scale!")
				return		
				
	if Form.GetInputValue("Transpose") < 0:
		if Form.GetInputValue("Mode") == 0:
			transpose_count = max_note_number-min_note_number+1 + Form.GetInputValue("Transpose")
		elif Form.GetInputValue("Mode") == 1:
			transpose_count = len(original_notes_numbers_without_repetition) + Form.GetInputValue("Transpose")
			while transpose_count < 0:
				transpose_count += len(original_notes_numbers_without_repetition)
		else: transpose_count = abs(Form.GetInputValue("Transpose"))
	else: transpose_count = Form.GetInputValue("Transpose")
	
	for i in range(transpose_count):
		notes_numbers = original_notes_numbers_without_repetition.copy()
		
		for n in range(flp.score.noteCount):
			if Form.GetInputValue("Mode") == 0: # Chromatic
				if flp.score.getNote(n).number + 1 <= max_note_number:
					flp.score.getNote(n).number = flp.score.getNote(n).number + 1
				else: flp.score.getNote(n).number = min_note_number
			elif Form.GetInputValue("Mode") == 1: # Existing notes numbers
				if flp.score.getNote(n).number < (max(notes_numbers)):
					flp.score.getNote(n).number = notes_numbers[notes_numbers.index(flp.score.getNote(n).number)+1] 
				else: flp.score.getNote(n).number = notes_numbers[0]
			else: # Scale
				if notes_before_first_scale_marker_indexes.count(n) != 0:
					continue
				for t in markers_times:		
					if flp.score.getNote(n).time >= t:
						x = markers_times.index(t)		
				i = scales[x].index(flp.score.getNote(n).number)
				if Form.GetInputValue("Transpose") > 0:
					if i==len(scales[x])-1 or scales[x][i+1] > max(notes_sections[x]):
						flp.score.getNote(n).number = min(notes_sections[x])
					else: flp.score.getNote(n).number = scales[x][i+1]
				else: 
					if i==0 or scales[x][i-1] < min(notes_sections[x]):
						flp.score.getNote(n).number = max(notes_sections[x])	
					else: flp.score.getNote(n).number = scales[x][i-1]


	if Form.GetInputValue("Horizontal cycle") < 0:
		if Form.GetInputValue("Mode") < 2:
			horizontal_cycles = flp.score.noteCount + Form.GetInputValue("Horizontal cycle")
		else: horizontal_cycles = flp.score.noteCount-len(notes_before_first_scale_marker_indexes) + Form.GetInputValue("Horizontal cycle")
	else: horizontal_cycles = Form.GetInputValue("Horizontal cycle")
	
	for i in range(horizontal_cycles):
		if Form.GetInputValue("Mode") < 2:	
			notes_times = [flp.score.getNote(n).time for n in range(flp.score.noteCount)]
			for n in range(flp.score.noteCount):
				if n < flp.score.noteCount - 1:
					flp.score.getNote(n).time = notes_times[n+1] 
				else: flp.score.getNote(n).time = notes_times[0]
		else:				
			for sec in range(len(notes_sections_times)):
				notes_times = [flp.score.getNote(n).time for n in notes_indexes[sec]]
				for n in range(len(notes_times)):
					if n < len(notes_times) - 1:
						flp.score.getNote(notes_indexes[sec][n]).time = notes_times[n+1] 
					else: flp.score.getNote(notes_indexes[sec][n]).time = notes_times[0]			