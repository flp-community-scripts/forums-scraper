"""flp
Title: Change properties of multiple notes
Author: Pierre Sosa
Category: Adjust
Version: v1.1
License: Unknown

Description: 
This script allows you to change the properties of multiple notes in the FL
Studio piano roll. You can choose to change all or random notes to fixed,
scaled, random, inverted, or default values. The script also provides a live
preview of the changes. The latest version (v1.1) includes controls for the
release property and a "Seed for RNG" knob.

Changelog:
2023-09-08 (Change properties of multiple notes v1.1)
- Added "Seed for RNG" knob

2023-07-27
- Bug-fixes

2023-07-23
- Added controls for release property

Thread Link: https://forum.image-line.com/viewtopic.php?t=307691
"""
import flpianoroll as flp
import _random

number_of_groups = 0

for note in range(flp.score.noteCount): 
	if flp.score.getNote(note).group > number_of_groups:
		number_of_groups = flp.score.getNote(note).group

notes_properties = ['velocity', 'pan', 'release', 'fcut', 'fres', 'pitchofs','time','length','number','color', 'group', 'slide', 'porta', 'muted', 'selected']
default_values = [0.78125, 0.5, 0.5, 0.5, 0.5, 0, 1, 1, 60, 0, 0, False, False, False, False]
default_min_for_controls = [0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0]
default_max_for_controls = [1, 1, 1, 1, 1, 120, flp.score.length, flp.score.length, 131, 15, (number_of_groups+1)]
modes = ["Don't change","Fixed Value","Scale","Random","Invert","Reset to default"] # for: 'velocity', 'pan', 'release', 'fcut', 'fres', 'pitchofs'
modes_2 = ["Don't change","Fixed Value","Random","Reset to default"] # for: 'time','length','number','color', 'group'
modes_3 = ["Don't change","Fixed Value","Random","Invert","Reset to default"] # for: 'slide', 'porta', 'muted', 'selected'

def random_value(return_int, range_min, range_max):
	x = _random.Random()
	x.seed()
	random_value = x.random()
	random_value = random_value * (range_max - range_min) + range_min  # convert value to fit between min and max range

	if return_int == True: # convert value to integer
		return round(random_value)
	return random_value

def createDialog():
	Form = flp.ScriptDialog("Change properties of multiple notes", "*** Script by Pierre Sosa ***")
	Form.AddInputCombo("Apply to","All selected notes,Random Notes",0)		
	Form.AddInputKnob('Probability', 50, 0, 100)
	for i in range(5):
		Form.AddInputCombo(notes_properties[i].capitalize() + " mode",[mode for mode in modes],0)
		Form.AddInputKnob(notes_properties[i].capitalize() + " value",default_values[i],default_min_for_controls[i],default_max_for_controls[i])
	for i in range(5,6):	
		Form.AddInputCombo(notes_properties[i].capitalize() + " mode",[mode for mode in modes],0)
		Form.AddInputKnobInt(notes_properties[i].capitalize() + " value",default_values[i],default_min_for_controls[i],default_max_for_controls[i])	
	for i in range(6,11):
		Form.AddInputCombo(notes_properties[i].capitalize() + " mode",[mode for mode in modes_2],0)
		Form.AddInputKnobInt(notes_properties[i].capitalize() + " value",default_values[i],default_min_for_controls[i],default_max_for_controls[i])			
	for i in range(11, len(notes_properties)):
		Form.AddInputCombo(notes_properties[i].capitalize() + " mode",[mode for mode in modes_3],0)
		Form.AddInputCombo(notes_properties[i].capitalize() + " value","False,True",0)
	return Form

def apply(Form):
	
	values = []
	modes = []
	i = 0
	for property in notes_properties:
		value = Form.GetInputValue(property.capitalize() + " value")
		mode = Form.GetInputValue(property.capitalize() + " mode")
		if i > 5 and i < 11: 
			if mode == 2:
				mode = 3
			elif mode == 3:
				mode = 5	
		elif i > 10:
			if value == 0:
				value = False
			else: value = True
			if mode > 1:
				mode += 1
		i += 1
		values.append(value)
		modes.append(mode)

	if Form.GetInputValue("Apply to") == 1:
		notes_to_alter = [] # List of indexes of notes to change 
		for i in range(int(flp.score.noteCount * Form.GetInputValue("Probability") / 100)):
			random_int = random_value(True, 0, flp.score.noteCount-1) # Generate random note index
			while notes_to_alter.count(random_int) != 0: # If the random index is already on the list...
				random_int = random_value(True, 0, flp.score.noteCount-1)
			notes_to_alter.append(random_int) # Add generated note index to the list

	for n in range(flp.score.noteCount):
		if Form.GetInputValue("Apply to") == 1:
			if notes_to_alter.count(n) == 0:
				continue
		i = 0		
		for property in notes_properties:
			if modes[i] == 1: # Fixed
				setattr(flp.score.getNote(n),property,values[i])
			elif modes[i] == 2: # Scale
				v = values[i]				
				if i < 5:
					if values[i] >= 0.5: 
						v = getattr(flp.score.getNote(n),property) + (values[i] * (1+1) - 1) * (1 - getattr(flp.score.getNote(n),property))
					else: v = getattr(flp.score.getNote(n),property) + (values[i] * (1+1) - 1) * (getattr(flp.score.getNote(n),property))
				elif i == 5: # pitchofs				
					if values[i] >= 0:
						v = getattr(flp.score.getNote(n),property) + (values[i] / 120) * (120 - getattr(flp.score.getNote(n),property))
					else: v = getattr(flp.score.getNote(n),property) - ((-1 * values[i]) / 120) * (120 + getattr(flp.score.getNote(n),property))			
				setattr(flp.score.getNote(n),property,v)
			elif modes[i] == 3: # Random
				if i < 5:
					setattr(flp.score.getNote(n),property,random_value(False,0,1))
				elif i == 5:	
					setattr(flp.score.getNote(n),property,random_value(True,-120,120))
				elif i < 8:
					setattr(flp.score.getNote(n),property,random_value(True,0,flp.score.length))
				elif i == 8:
					setattr(flp.score.getNote(n),property,random_value(True,0,131))
				elif i == 9:
					setattr(flp.score.getNote(n),property,random_value(True,0,15))
				elif i == 10:
					setattr(flp.score.getNote(n),property,random_value(True,0,number_of_groups+1))
				elif i > 10:
					rand_v = random_value(True,0,1)
					if rand_v == 0:
						setattr(flp.score.getNote(n),property,False)
					else: setattr(flp.score.getNote(n),property,True)					
					
			elif modes[i] == 4: # Invert
				if i < 5:
					v = getattr(flp.score.getNote(n),property)
					setattr(flp.score.getNote(n),property,1 - v)
				if i == 5:
					v = getattr(flp.score.getNote(n),property)
					setattr(flp.score.getNote(n),property,(v * -1))
				elif i > 10:						
					if getattr(flp.score.getNote(n),property) == True:
						setattr(flp.score.getNote(n),property,False)
					else: setattr(flp.score.getNote(n),property,True)
			elif modes[i] == 5: # Default
				setattr(flp.score.getNote(n),property,default_values[i])
			i += 1

	


    



