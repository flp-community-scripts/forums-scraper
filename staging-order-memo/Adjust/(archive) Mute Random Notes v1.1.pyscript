"""flp
Title: Mute Random Notes v1.1
Author: Pierre Sosa
Category: Adjust
Version: v1.1
License: Unknown

Description: 
This script allows you to mute random notes in the FL Studio piano roll. It has
a probability knob that determines the percentage of notes to mute. You can also
choose to unmute notes that were previously muted before running the script. It
works on all notes if none are selected, or only on the selected notes. The
script has been updated to include selection options and a "seed for RNG" knob.

Changelog:
2023-08-27 (v.1.1)
- Added 'seed for RNG' knob

2023-07-02
- Added selection options

Thread Link: https://forum.image-line.com/viewtopic.php?t=307307
"""
import flpianoroll as flp
import _random

seed_for_RNG_max = 999

# Randomizer
def random_generator(seed):
	x = _random.Random()
	x.seed(seed) if seed > 0 else x.seed()
	while True:
		yield x.random()
	
def random_value(return_int, range_min, range_max):
	random_value = next(rng) * (range_max - range_min) + range_min  # convert value to fit between min and max range

	if return_int:  # convert value to integer
		return round(random_value)
	return random_value	

def createDialog():
	Form = flp.ScriptDialog("Mute Random Notes v1.1", "Probability knob = percent of notes to mute.\r\n" + 
	"\r\n" +
	"Seed for RNG knob = if it's set to 0 then the seed is changed in each execution of the script. If it's set to a positive value then the seed is keeped. \r\n" +
	"\r\n" +
	"*** Script by Pierre Sosa ***")
	Form.AddInputKnob('Probability', 50, 0, 100)
	Form.AddInputKnobInt("Seed for RNG",0,0,seed_for_RNG_max)
	Form.AddInputCheckbox("Unmute all before", True)
	Form.AddInputCombo("Select notes after", "All,Only muted,Only not muted,None,Don't change", 4)
	return Form

def apply(Form):
 
	# Checks if there are notes in the score
	if not flp.score.noteCount: 
		flp.Utils.ShowMessage("There are no notes!")
		return	
	
	if Form.GetInputValue("Unmute all before"):
		for n in range(flp.score.noteCount):
			flp.score.getNote(n).muted = False
	
	seed = Form.GetInputValue("Seed for RNG")
	global rng
	rng = random_generator(seed)
	
	# Create a list of notes indexes with a random order
	def randomize_notes():
		notes = [note for note in range(flp.score.noteCount)]
		for i in range(len(notes)):
			max = len(notes)-1
			random_int = random_value(True, 0, max) # Finds random index from the list of notes indexes
			notes_to_alter.append(notes[random_int]) # Add random note index to the list
			notes.pop(random_int) # Removes note index from the list of notes indexes	 
	
	notes_to_alter = []	
	randomize_notes()

	probability = Form.GetInputValue("Probability") / 100
	
	select_notes_after = Form.GetInputValue("Select notes after")
	if select_notes_after < 4: # Other than don't change
		for n in range(flp.score.noteCount):
			flp.score.getNote(n).selected = False
				
	for n in range(round(flp.score.noteCount * probability)):
		note = flp.score.getNote(notes_to_alter[n])
		note.muted = True
		if select_notes_after == 1: # Only muted
			note.selected = True

	if select_notes_after == 0 or select_notes_after == 2: # All
		for n in range(flp.score.noteCount):
			flp.score.getNote(n).selected = True
		if select_notes_after == 2: # Only not muted
			for n in range(round(flp.score.noteCount * probability)):
				flp.score.getNote(notes_to_alter[n]).selected = False
    




